type Programe {
  id: ID!
  proCode: String!
  title: String!
}

type Campus {
  id: ID!
  campusID: String!
  campusName: String
  title: String!
}

type Student {
  id: ID!
  stuID: String!
  studyYaer: String
  class: String!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelProgrameConnection {
  items: [Programe]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelProgrameFilterInput {
  id: ModelIDFilterInput
  proCode: ModelStringFilterInput
  title: ModelStringFilterInput
  and: [ModelProgrameFilterInput]
  or: [ModelProgrameFilterInput]
  not: ModelProgrameFilterInput
}

type Query {
  getPrograme(id: ID!): Programe
  listProgrames(filter: ModelProgrameFilterInput, limit: Int, nextToken: String): ModelProgrameConnection
  getCampus(id: ID!): Campus
  listCampuss(filter: ModelCampusFilterInput, limit: Int, nextToken: String): ModelCampusConnection
  getStudent(id: ID!): Student
  listStudents(filter: ModelStudentFilterInput, limit: Int, nextToken: String): ModelStudentConnection
}

input CreateProgrameInput {
  id: ID
  proCode: String!
  title: String!
}

input UpdateProgrameInput {
  id: ID!
  proCode: String
  title: String
}

input DeleteProgrameInput {
  id: ID
}

type Mutation {
  createPrograme(input: CreateProgrameInput!): Programe
  updatePrograme(input: UpdateProgrameInput!): Programe
  deletePrograme(input: DeleteProgrameInput!): Programe
  createCampus(input: CreateCampusInput!): Campus
  updateCampus(input: UpdateCampusInput!): Campus
  deleteCampus(input: DeleteCampusInput!): Campus
  createStudent(input: CreateStudentInput!): Student
  updateStudent(input: UpdateStudentInput!): Student
  deleteStudent(input: DeleteStudentInput!): Student
}

type Subscription {
  onCreatePrograme: Programe @aws_subscribe(mutations: ["createPrograme"])
  onUpdatePrograme: Programe @aws_subscribe(mutations: ["updatePrograme"])
  onDeletePrograme: Programe @aws_subscribe(mutations: ["deletePrograme"])
  onCreateCampus: Campus @aws_subscribe(mutations: ["createCampus"])
  onUpdateCampus: Campus @aws_subscribe(mutations: ["updateCampus"])
  onDeleteCampus: Campus @aws_subscribe(mutations: ["deleteCampus"])
  onCreateStudent: Student @aws_subscribe(mutations: ["createStudent"])
  onUpdateStudent: Student @aws_subscribe(mutations: ["updateStudent"])
  onDeleteStudent: Student @aws_subscribe(mutations: ["deleteStudent"])
}

type ModelCampusConnection {
  items: [Campus]
  nextToken: String
}

input ModelCampusFilterInput {
  id: ModelIDFilterInput
  campusID: ModelStringFilterInput
  campusName: ModelStringFilterInput
  title: ModelStringFilterInput
  and: [ModelCampusFilterInput]
  or: [ModelCampusFilterInput]
  not: ModelCampusFilterInput
}

input CreateCampusInput {
  id: ID
  campusID: String!
  campusName: String
  title: String!
}

input UpdateCampusInput {
  id: ID!
  campusID: String
  campusName: String
  title: String
}

input DeleteCampusInput {
  id: ID
}

type ModelStudentConnection {
  items: [Student]
  nextToken: String
}

input ModelStudentFilterInput {
  id: ModelIDFilterInput
  stuID: ModelStringFilterInput
  studyYaer: ModelStringFilterInput
  class: ModelStringFilterInput
  and: [ModelStudentFilterInput]
  or: [ModelStudentFilterInput]
  not: ModelStudentFilterInput
}

input CreateStudentInput {
  id: ID
  stuID: String!
  studyYaer: String
  class: String!
}

input UpdateStudentInput {
  id: ID!
  stuID: String
  studyYaer: String
  class: String
}

input DeleteStudentInput {
  id: ID
}
